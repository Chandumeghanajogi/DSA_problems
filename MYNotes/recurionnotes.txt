Here are some problem statements that require the effective use of recursion:
 

Generate Subsets:

 

Given a set of distinct integers, generate all possible subsets of the set.
Example: Given the set {1, 2, 3}, generate subsets: {}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}.

 

def subsets(nums):
   result = []
   def backtrack(start, path):
       result.append(path)
       for i in range(start, len(nums)):
           # Include nums[i] in the current subset and recurse
           backtrack(i + 1, path + [nums[i]])
   backtrack(0, [])
   return result
# Example usage
nums = [1, 2, 3]
all_subsets = subsets(nums)
print(all_subsets)
 

Combination Sum:

 

Given an array of distinct integers and a target sum, find all unique combinations in the array that add up to the target.
Example: Given the array [2, 3, 6, 7] and target sum 7, find combinations: [2, 2, 3], [7].

 

def combinationSum(nums, target):
   def backtrack(start, path, target):
       if target == 0:
           result.append(path)
           return
       if target < 0:
           return
       for i in range(start, len(nums)):
           backtrack(i, path + [nums[i]], target - nums[i])
   result = []
   nums.sort()  # Sorting the array is not strictly necessary, but it helps with efficiency
   backtrack(0, [], target)
   return result
# Example usage
nums = [2, 3, 6, 7]
target = 7
combinations = combinationSum(nums, target)
print(combinations)
 

Generate Parentheses:

 

Given an integer n, generate all valid combinations of n pairs of parentheses.
Example: Given n = 3, generate combinations: "((()))", "(()())", "(())()", "()(())", "()()()".

 

Sudoku Solver:

 

Given an incomplete Sudoku board, solve the board by filling in the missing numbers.
Example: Solve the Sudoku board with missing numbers.

 

Tree Diameter:

 

Given a binary tree, find the diameter of the tree, which is the length of the longest path between any two nodes.
Example: Given a binary tree, find its diameter.


N-Queens Problem:

 

Given an integer n, find all distinct solutions to the n-queens puzzle, where each queen is placed on a unique row and column on an n x n chessboard.
Example: Solve the N-Queens problem for n = 4.

 

Balanced Parentheses:

 

Given a string containing parentheses, check if the parentheses are balanced.
Example: Check if the string "((())())" has balanced parentheses.

 

Reverse Linked List:

 

Given a singly linked list, reverse the list recursively.
Example: Reverse a linked list: 1 -> 2 -> 3 -> 4 -> 5.

 

Tower of Hanoi with Pegs:

 

Solve the Tower of Hanoi puzzle with more than three pegs, where the disks need to be moved from one peg to another using a set of rules.
Example: Solve the Tower of Hanoi puzzle with 4 pegs and 6 disks.

 

Permutations with Duplicates:

 

Generate all unique permutations of a given string with duplicate characters.
Example: Generate all permutations of the string "aab".